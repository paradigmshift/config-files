load_paths.unshift("chrome://conkeror-contrib/content/");

// set default download directory
cwd = get_home_directory();
cwd = make_file("/home/mo/tmp");

// don't use a new window for downloads
download_buffer_automatic_open_target = OPEN_NEW_BUFFER_BACKGROUND;

// give me new tabs; open buffers (tabs) in the background
require("new-tabs.js");
require("clicks-in-new-buffer");
clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND;
clicks_in_new_buffer_button = 1; //midclick links in new buffers with

// auto completion in the minibuffer
minibuffer_auto_complete_default = true;
url_completion_use_bookmarks = true;

require("mode-line.js");

// funky icons in the modeline

require("mode-line-buttons.js");
mode_line_add_buttons(standard_mode_line_buttons, true);

// we'd like to see the # of buffers being loaded
add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);
// we don't need a clock
remove_hook("mode_line_hook", mode_line_adder(clock_widget));

// Bind Number Keys to Switch to Buffers 1-10
function define_switch_buffer_key (key, buf_num) {
    define_key(default_global_keymap, key,
               function (I) {
                   switch_to_buffer(I.window,
                                    I.window.buffers.get_buffer(buf_num));
               });
}
for (let i = 0; i < 10; ++i) {
    define_switch_buffer_key(String((i+1)%10), i);
}

// static bookmarks
define_webjump("hn", "http://news.ycombinator.com");
define_webjump("fb", "http://facebook.com");
define_webjump("az", "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s");
define_webjump("so", "http://stackoverflow.com/search?q=%s");
define_webjump("me", "http://math.stackexchange.com/search?q=%s");
define_webjump("yt", "http://youtube.com/results?search_query=%s&aq=f");
define_webjump("r", "http://reddit.com/r/%s");
define_webjump("clhs", "http://www.xach.com/clhs?q=%s", $alternative = "http://www.lispworks.com/documentation/HyperSpec/Front/index.html");
define_webjump("cliki", "http://www.cliki.net/admin/search?words=%s");
define_webjump("py", "http://docs.python.org/py3k/search.html?q=%s");
define_webjump("gh", "http://github.com/search?q=%s&type=Everything");

// gmail
define_webjump("1g", "http://mail.google.com/mail/u/0/");
define_webjump("2g", "http://mail.google.com/mail/u/1/");
define_webjump("3g", "http://mail.google.com/mail/u/2/");

//google translate
define_webjump("trans", "http://translate.google.com/translate_t#auto|en|%s");

editor_shell_command = "emacsclient -c";
view_source_use_external_editor = true;

define_key(content_buffer_normal_keymap, "v", "view-source");

define_browser_object_class(
    "history-url", null, 
    function (I, prompt) {
        check_buffer (I.buffer, content_buffer);
        var result = yield I.buffer.window.minibuffer.read_url(
            $prompt = prompt,  $use_webjumps = false, $use_history = true, $use_bookmarks = false);
        yield co_return (result);
    });

interactive("find-url-from-history",
            "Find a page from history in the current buffer",
            "find-url",
            $browser_object = browser_object_history_url);

interactive("find-url-from-history-new-buffer",
            "Find a page from history in the current buffer",
            "find-url-new-buffer",
            $browser_object = browser_object_history_url);

define_key(content_buffer_normal_keymap, "h", "find-url-from-history-new-buffer");
define_key(content_buffer_normal_keymap, "H", "find-url-from-history");

// org-protocol stuff
function org_store_link (url, title, window) {
    var cmd_str = 'emacsclient \"org-protocol://store-link://'+url+'/'+title+'\"';
    if (window != null) {
        window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-store-link", "Stores [[url][title]] as org link and copies url to emacs kill ring",
            function (I) {
                org_store_link(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), I.window);
            });

function org_capture (url, title, selection, window) {
    var cmd_str = 'emacsclient \"org-protocol://capture://'+url+'/'+title+'/'+selection+'\"';
    if (window != null) {
        window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-capture", "Clip url, title, and selection to capture via org-protocol",
            function (I) {
                org_capture(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), encodeURIComponent(I.buffer.top_frame.getSelection()), I.window);
            });

define_key(content_buffer_normal_keymap, "C-c r", "org-capture");
define_key(content_buffer_normal_keymap, "C-c l", "org-store-link");
